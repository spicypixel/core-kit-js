{"version":3,"sources":["src/ArrayBufferConverter.ts","src/DataURL.ts","src/MediaType.ts","src/UniversalModule.ts"],"names":["SpicyPixel","SpicyPixel.ArrayBufferConverter","SpicyPixel.ArrayBufferConverter.constructor","SpicyPixel.ArrayBufferConverter.toBase64","SpicyPixel.ArrayBufferConverter.fromBase64","SpicyPixel.ArrayBufferConverter.toBinaryString","SpicyPixel.ArrayBufferConverter.fromBinaryString","SpicyPixel.DataURL","SpicyPixel.DataURL.constructor","SpicyPixel.DataURL.mediaType","SpicyPixel.DataURL.isBase64","SpicyPixel.DataURL.data","SpicyPixel.DataURL.setBase64EncodedData","SpicyPixel.DataURL.setURLEncodedData","SpicyPixel.DataURL.toString","SpicyPixel.DataURL.toJSON","SpicyPixel.DataURL.valueOf","SpicyPixel.DataURL.toArrayBuffer","SpicyPixel.DataURL.toBase64","SpicyPixel.DataURL.toBinaryString","SpicyPixel.DataURL.toUnicodeString","SpicyPixel.DataURL.createFromBase64","SpicyPixel.DataURL.createFromBinaryString","SpicyPixel.DataURL.createFromUnicodeString","SpicyPixel.MediaType","SpicyPixel.MediaType.constructor","SpicyPixel.MediaType.type","SpicyPixel.MediaType.subtype","SpicyPixel.MediaType.parameters","SpicyPixel.MediaType.isValid","SpicyPixel.MediaType.hasSuffix","SpicyPixel.MediaType.isVendor","SpicyPixel.MediaType.isPersonal","SpicyPixel.MediaType.isExperimental","SpicyPixel.MediaType.toString","SpicyPixel.MediaType.toJSON","SpicyPixel.MediaType.valueOf","SpicyPixel.MediaType.setSubtypeAndSuffix","SpicyPixel.MediaType.firstSubtypeFacetEquals","SpicyPixel.MediaType.wrapQuotes","SpicyPixel.MediaType.unwrapQuotes","SpicyPixel.Imports"],"mappings":"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","file":"spicypixel-core.min.js","sourcesContent":["module SpicyPixel {\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  export class ArrayBufferConverter\n  {\n    constructor() {\n      throw new Error('This class is static and not meant to be constructed');\n    }\n\n    /*\n     * Base64 conversion from:\n     *\n     * base64-arraybuffer\n     * https://github.com/niklasvh/base64-arraybuffer\n     *\n     * Copyright (c) 2012 Niklas von Hertzen\n     * Licensed under the MIT license.\n     */\n    static toBase64(arrayBuffer:ArrayBuffer):string {\n      // jshint bitwise:false\n      var bytes = new Uint8Array(arrayBuffer);\n      var len = bytes.length;\n      var base64 = \"\";\n\n      for (var i = 0; i < len; i+=3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n      }\n\n      if ((len % 3) === 2) {\n        base64 = base64.substring(0, base64.length - 1) + \"=\";\n      } else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + \"==\";\n      }\n\n      return base64;\n      // jshint bitwise:true\n    }\n\n    static fromBase64(base64:string):ArrayBuffer {\n      // jshint bitwise:false\n      var bufferLength = base64.length * 0.75;\n      var len = base64.length;\n      var p = 0;\n      var encoded1:number, encoded2:number, encoded3:number, encoded4:number;\n\n      if (base64[base64.length - 1] === \"=\") {\n        bufferLength--;\n        if (base64[base64.length - 2] === \"=\") {\n          bufferLength--;\n        }\n      }\n\n      var arraybuffer = new ArrayBuffer(bufferLength),\n        bytes = new Uint8Array(arraybuffer);\n\n      for (var i = 0; i < len; i+=4) {\n        encoded1 = chars.indexOf(base64[i]);\n        encoded2 = chars.indexOf(base64[i+1]);\n        encoded3 = chars.indexOf(base64[i+2]);\n        encoded4 = chars.indexOf(base64[i+3]);\n\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n      }\n\n      return arraybuffer;\n      // jshint bitwise:true\n    }\n\n    static toBinaryString(arrayBuffer:ArrayBuffer):string {\n      var binary = \"\";\n      var bytes = new Uint8Array(arrayBuffer);\n      var length = bytes.byteLength;\n      var i = 0;\n      while (i < length) {\n        binary += String.fromCharCode(bytes[i]);\n        ++i;\n      }\n      return binary;\n    }\n\n    static fromBinaryString(binary:string):ArrayBuffer {\n      var length = binary.length;\n      var buffer = new ArrayBuffer(length);\n      var bytes = new Uint8Array(buffer);\n      var i = 0;\n      while (i < length) {\n        var code = binary.charCodeAt(i);\n        if (code > 255) {\n          throw new Error(\"a multibyte character was encountered in the provided string which indicates it was not encoded as a binary string\");\n        }\n        bytes[i] = code;\n        ++i;\n      }\n      return bytes.buffer;\n    }\n  }\n}\n","// TODO: Optimize using deferred parsing.\n// If a data URL string is passed in and the only operation called is\n// toString() then there is no need to parse and increase\n// memory consumption. This would complicate the code though\n// so only implement if needed.\n\ndeclare var escape:(s:string) => string;\ndeclare var unescape:(s:string) => string;\n\nmodule SpicyPixel {\n  // data:[<MIME-type>][;charset=<encoding>][;base64],<data>\n\n  // dataurl    := \"data:\" [ mediatype ] [ \";base64\" ] \",\" data\n  // mediatype  := [ type \"/\" subtype ] *( \";\" parameter )\n  // data       := *urlchar\n  // parameter  := attribute \"=\" value\n  export class DataURL {\n    private _mediaType:MediaType;\n    private _isBase64:boolean;\n    private _data:string;\n\n    get mediaType():MediaType {\n      return this._mediaType;\n    }\n\n    set mediaType(mediaType:MediaType) {\n      if(mediaType instanceof MediaType) {\n        this._mediaType = mediaType;\n      }\n      else if (typeof mediaType === \"string\") {\n        this._mediaType = new MediaType(<string><any>mediaType);\n      }\n      else {\n        throw new Error(\"Media type must be 'string' or 'MediaType'\");\n      }\n    }\n\n    get isBase64():boolean {\n      return this._isBase64;\n    }\n\n    get data():string {\n      return this._data;\n    }\n\n    setBase64EncodedData(base64EncodedData:string):void {\n      this._isBase64 = true;\n      this._data = base64EncodedData;\n    }\n\n    setURLEncodedData(urlEncodedData:string):void {\n      this._isBase64 = false;\n      this._data = urlEncodedData;\n    }\n\n    constructor(data:any, options?:any) {\n      // Set default options\n      if (!options) {\n        options = {\n          mediaType: null,\n          encoding: \"auto\"\n        };\n      }\n\n      if(!options.encoding) {\n        options.encoding = \"auto\";\n      }\n\n      // Validate encoding\n      if (options.encoding !== \"auto\" && options.encoding !== \"url\" && options.encoding !== \"base64\") {\n        throw new Error(\"Unknown encoding (must be 'auto', 'url', or 'base64'): \" + options.encoding);\n      }\n\n      // Save media type\n      var mediaType:any = options.mediaType;\n      if (typeof mediaType === \"string\") {\n        mediaType = new MediaType(mediaType);\n      }\n      this._mediaType = mediaType;\n\n      // Save data and return if none\n      if (!data) {\n        this._isBase64 = false;\n        this._data = data;\n        return;\n      }\n\n      // Parse data\n      if (data instanceof ArrayBuffer) {\n        if (options.encoding === \"base64\" || options.encoding === \"auto\") {\n          this.setBase64EncodedData(ArrayBufferConverter.toBase64(data));\n        } else if (options.encoding === \"url\") {\n          this.setURLEncodedData(encodeURIComponent(ArrayBufferConverter.toBinaryString(data)));\n        }\n      } else if (typeof data === \"string\") {\n        // Ensure this is a data URI\n        var startsWithData = data.slice(0, \"data:\".length) === \"data:\";\n        if (!startsWithData) {\n          throw new Error(\"Only 'data' URI strings are supported\");\n        }\n\n        // Find the comma that separates the prefix from the data\n        var commaIndex = data.indexOf(\",\");\n        if (commaIndex === -1) {\n          throw new Error(\"Missing comma in SQLBlob URL\");\n        }\n\n        // Get prefix and data\n        var prefix = data.slice(0, commaIndex);\n        var encodedData = data.slice(commaIndex + 1);\n\n        // Get is base64\n        var prefixParts = prefix.split(';');\n        var isBase64 = false;\n        for (var i = 1; i < prefixParts.length; ++i) {\n          var prefixPart = prefixParts[i].trim();\n          if (prefixPart === \"base64\") {\n            isBase64 = true;\n            break;\n          }\n        }\n\n        // Get media type\n        mediaType = prefix.slice(\"data:\".length, commaIndex);\n        mediaType = mediaType.length === 0 ? null : mediaType;\n        this._mediaType = this._mediaType || new MediaType(mediaType);\n\n        // Convert encoded data as needed\n        if (options.encoding === \"auto\") {\n          // Auto encoding saves the data URI as is\n          this._isBase64 = isBase64;\n          this._data = encodedData;\n        } else if (options.encoding === \"base64\") {\n          // Convert to base64\n          this._isBase64 = true;\n          if (isBase64) {\n            this._data = encodedData;\n          } else {\n            this._data = window.btoa(unescape(encodedData));\n          }\n        } else if (options.encoding === \"url\") {\n          // Convert to URL encoding\n          this._isBase64 = false;\n          if (!isBase64) {\n            this._data = encodedData;\n          } else {\n            this._data = encodeURIComponent(window.atob(encodedData));\n          }\n        }\n      } else {\n        throw new Error(\"unsupported object type (must be ArrayBuffer or string): \" + typeof data);\n      }\n    }\n\n    toString():string {\n      return \"data:\"\n        + (this._mediaType ? this._mediaType.toString() : \"\")\n        + (this._isBase64 ? \";base64\" : \"\") + \",\"\n        + (this._data ? this._data : \"\");\n    }\n\n    toJSON():string {\n      return this.toString();\n    }\n\n    valueOf():string {\n      return this.toString();\n    }\n\n    toArrayBuffer():ArrayBuffer {\n      if (!this._data) {\n        return null;\n      }\n      if (this._isBase64) {\n        return ArrayBufferConverter.fromBase64(this._data);\n      } else {\n        return ArrayBufferConverter.fromBinaryString(unescape(this._data));\n      }\n    }\n\n    toBase64():string {\n      if (!this._data) {\n        return this._data;\n      }\n      if (this._isBase64) {\n        return this._data;\n      } else {\n        return window.btoa(unescape(this._data));\n      }\n    }\n\n    toBinaryString():string {\n      if (!this._data) {\n        return this._data;\n      }\n      if (this._isBase64) {\n        return window.atob(this._data);\n      } else {\n        return unescape(this._data);\n      }\n    }\n\n    toUnicodeString():string {\n      if (!this._data) {\n        return this._data;\n      }\n      if (this._isBase64) {\n        return decodeURIComponent(escape(window.atob(this._data)));\n      } else {\n        return decodeURIComponent(this._data);\n      }\n    }\n\n    static createFromBase64(base64:string, options?:any):DataURL {\n      return new DataURL(\"data:;base64,\" + base64, options);\n    }\n\n    static createFromBinaryString(binary:string, options?:any):DataURL {\n      if (!options) {\n        options = {\n          encoding: \"auto\"\n        };\n      }\n      if (options.encoding === \"base64\" || options.encoding === \"auto\") {\n        return new DataURL(\"data:;base64,\" + window.btoa(binary), options);\n      } else if (options.encoding === \"url\") {\n        return new DataURL(\"data:,\" + encodeURIComponent(binary), options);\n      }\n    }\n\n    static createFromUnicodeString(text:string, options?:any):DataURL {\n      return new DataURL(\"data:,\" + encodeURIComponent(text), options);\n    }\n  }\n}\n","/**\n * media-type\n * @author Lovell Fuller (original JS)\n * @author Aaron Oneal (TypeScript)\n *\n * This code is distributed under the Apache License Version 2.0, the terms of\n * which may be found at http://www.apache.org/licenses/LICENSE-2.0.html\n */\n\nmodule SpicyPixel {\n  var mediaTypeMatcher = /^(application|audio|image|message|model|multipart|text|video)\\/([a-zA-Z0-9!#$%^&\\*_\\-\\+{}\\|'.`~]{1,127})(;.*)?$/;\n  var parameterSplitter = /;(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*(?![^\\\"]*\\\"))/;\n\n  export class MediaType {\n    private _type:string;\n    private _subtype:string;\n    private _parameters:any;\n    private _suffix:string;\n    private _subtypeFacets:string[];\n\n    constructor(mediaType?:string) {\n      this._type = null;\n      this.setSubtypeAndSuffix(null);\n      this._parameters = {};\n\n      if (mediaType) {\n        var match = mediaType.match(mediaTypeMatcher);\n        if (match) {\n          this._type = match[1];\n          this.setSubtypeAndSuffix(match[2]);\n          if (match[3]) {\n            match[3].substr(1).split(parameterSplitter).forEach((parameter) => {\n              var keyAndValue = parameter.split('=', 2);\n              if (keyAndValue.length === 2) {\n                this._parameters[keyAndValue[0].toLowerCase().trim()] = this.unwrapQuotes(keyAndValue[1].trim());\n              }\n            });\n          }\n        }\n      }\n    }\n\n    get type():string {\n      return this._type;\n    }\n\n    set type(type:string) {\n      this._type = type;\n    }\n\n    get subtype():string {\n      return this._subtype;\n    }\n\n    set subtype(subtype:string) {\n      this.setSubtypeAndSuffix(subtype);\n    }\n\n    get parameters():any {\n      return this._parameters;\n    }\n\n    set parameters(parameters:any) {\n      this._parameters = parameters;\n    }\n\n    get isValid():boolean {\n      return this._type !== null && this._subtype !== null && this._subtype !== \"example\";\n    }\n\n    get hasSuffix():boolean {\n      return !!this._suffix;\n    }\n\n    get isVendor():boolean {\n      return this.firstSubtypeFacetEquals(\"vnd\");\n    }\n\n    get isPersonal():boolean {\n      return this.firstSubtypeFacetEquals(\"prs\");\n    }\n\n    get isExperimental():boolean {\n      return this.firstSubtypeFacetEquals(\"x\") || this._subtype.substring(0, 2).toLowerCase() === \"x-\";\n    }\n\n    toString():string {\n      var str = \"\";\n      if (this.isValid) {\n        str = str + this._type + \"/\" + this._subtype;\n        if (this.hasSuffix) {\n          str = str + \"+\" + this._suffix;\n        }\n        var parameterKeys = Object.keys(this._parameters);\n        if (parameterKeys.length > 0) {\n          var parameters:string[] = [];\n          var that = this;\n          parameterKeys.sort((a, b) => {\n            return a.localeCompare(b);\n          }).forEach((element) => {\n            parameters.push(element + \"=\" + this.wrapQuotes(that._parameters[element]));\n          });\n          str = str + \";\" + parameters.join(\";\");\n        }\n      }\n      return str;\n    }\n\n    toJSON():string {\n      return this.toString();\n    }\n\n    valueOf():string {\n      return this.toString();\n    }\n\n    private setSubtypeAndSuffix(subtype:string):void {\n      this._subtype = subtype;\n      this._subtypeFacets = [];\n      this._suffix = null;\n      if (subtype) {\n        if (subtype.indexOf(\"+\") > -1 && subtype.substr(-1) !== \"+\") {\n          var fixes = subtype.split(\"+\", 2);\n          this._subtype = fixes[0];\n          this._subtypeFacets = fixes[0].split(\".\");\n          this._suffix = fixes[1];\n        } else {\n          this._subtypeFacets = subtype.split(\".\");\n        }\n      }\n    }\n\n    private firstSubtypeFacetEquals(str:string):boolean {\n      return this._subtypeFacets.length > 0 && this._subtypeFacets[0] === str;\n    }\n\n    private wrapQuotes(str:string):string {\n      return (str.indexOf(\";\") > -1) ? '\"' + str + '\"' : str;\n    }\n\n    private unwrapQuotes(str:string):string {\n      return (str.substr(0, 1) === '\"' && str.substr(-1) === '\"') ? str.substr(1, str.length - 2) : str;\n    }\n  }\n}\n","module SpicyPixel {\n    export class Imports {\n    }\n}\n\ndeclare var module:any;\ndeclare var exports:any;\ndeclare var define:any;\ndeclare var require:any;\n\n(function (root:any, factory:any) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD anonymous module\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        // CommonJS anonymous module\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.SpicyPixel = factory();\n    }\n})(this, function () {\n    return SpicyPixel;\n});"],"sourceRoot":"./"}