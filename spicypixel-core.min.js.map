{"version":3,"sources":["src/ArrayBufferConverter.ts","src/DataURL.ts","spicypixel-core.js","src/MediaType.ts","src/UniversalModule.ts"],"names":["SpicyPixel","Core","chars","ArrayBufferConverter","Error","toBase64","arrayBuffer","bytes","Uint8Array","len","length","base64","i","substring","fromBase64","encoded1","encoded2","encoded3","encoded4","bufferLength","p","arraybuffer","ArrayBuffer","indexOf","toBinaryString","binary","byteLength","String","fromCharCode","fromBinaryString","buffer","code","charCodeAt","DataURL","data","options","mediaType","encoding","MediaType","this","_mediaType","_isBase64","_data","setBase64EncodedData","setURLEncodedData","encodeURIComponent","startsWithData","slice","commaIndex","prefix","encodedData","prefixParts","split","isBase64","prefixPart","trim","window","btoa","unescape","atob","Object","defineProperty","prototype","get","set","enumerable","configurable","base64EncodedData","urlEncodedData","toString","toJSON","valueOf","toArrayBuffer","toUnicodeString","decodeURIComponent","escape","createFromBase64","createFromBinaryString","createFromUnicodeString","text","mediaTypeMatcher","parameterSplitter","_this","_type","setSubtypeAndSuffix","_parameters","match","substr","forEach","parameter","keyAndValue","toLowerCase","unwrapQuotes","type","_subtype","subtype","parameters","_suffix","firstSubtypeFacetEquals","str","isValid","hasSuffix","parameterKeys","keys","that","sort","a","b","localeCompare","element","push","wrapQuotes","join","_subtypeFacets","fixes","Imports","root","factory","define","amd","exports","module"],"mappings":"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","file":"spicypixel-core.min.js","sourcesContent":["module SpicyPixel.Core {\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  export class ArrayBufferConverter\n  {\n    constructor() {\n      throw new Error('This class is static and not meant to be constructed');\n    }\n\n    /*\n     * Base64 conversion from:\n     *\n     * base64-arraybuffer\n     * https://github.com/niklasvh/base64-arraybuffer\n     *\n     * Copyright (c) 2012 Niklas von Hertzen\n     * Licensed under the MIT license.\n     */\n    static toBase64(arrayBuffer:ArrayBuffer):string {\n      // jshint bitwise:false\n      var bytes = new Uint8Array(arrayBuffer);\n      var len = bytes.length;\n      var base64 = \"\";\n\n      for (var i = 0; i < len; i+=3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n      }\n\n      if ((len % 3) === 2) {\n        base64 = base64.substring(0, base64.length - 1) + \"=\";\n      } else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + \"==\";\n      }\n\n      return base64;\n      // jshint bitwise:true\n    }\n\n    static fromBase64(base64:string):ArrayBuffer {\n      // jshint bitwise:false\n      var bufferLength = base64.length * 0.75;\n      var len = base64.length;\n      var p = 0;\n      var encoded1:number, encoded2:number, encoded3:number, encoded4:number;\n\n      if (base64[base64.length - 1] === \"=\") {\n        bufferLength--;\n        if (base64[base64.length - 2] === \"=\") {\n          bufferLength--;\n        }\n      }\n\n      var arraybuffer = new ArrayBuffer(bufferLength),\n        bytes = new Uint8Array(arraybuffer);\n\n      for (var i = 0; i < len; i+=4) {\n        encoded1 = chars.indexOf(base64[i]);\n        encoded2 = chars.indexOf(base64[i+1]);\n        encoded3 = chars.indexOf(base64[i+2]);\n        encoded4 = chars.indexOf(base64[i+3]);\n\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n      }\n\n      return arraybuffer;\n      // jshint bitwise:true\n    }\n\n    static toBinaryString(arrayBuffer:ArrayBuffer):string {\n      var binary = \"\";\n      var bytes = new Uint8Array(arrayBuffer);\n      var length = bytes.byteLength;\n      var i = 0;\n      while (i < length) {\n        binary += String.fromCharCode(bytes[i]);\n        ++i;\n      }\n      return binary;\n    }\n\n    static fromBinaryString(binary:string):ArrayBuffer {\n      var length = binary.length;\n      var buffer = new ArrayBuffer(length);\n      var bytes = new Uint8Array(buffer);\n      var i = 0;\n      while (i < length) {\n        var code = binary.charCodeAt(i);\n        if (code > 255) {\n          throw new Error(\"a multibyte character was encountered in the provided string which indicates it was not encoded as a binary string\");\n        }\n        bytes[i] = code;\n        ++i;\n      }\n      return bytes.buffer;\n    }\n  }\n}\n","// TODO: Optimize using deferred parsing.\n// If a data URL string is passed in and the only operation called is\n// toString() then there is no need to parse and increase\n// memory consumption. This would complicate the code though\n// so only implement if needed.\n\ndeclare var escape:(s:string) => string;\ndeclare var unescape:(s:string) => string;\n\nmodule SpicyPixel.Core {\n  // data:[<MIME-type>][;charset=<encoding>][;base64],<data>\n\n  // dataurl    := \"data:\" [ mediatype ] [ \";base64\" ] \",\" data\n  // mediatype  := [ type \"/\" subtype ] *( \";\" parameter )\n  // data       := *urlchar\n  // parameter  := attribute \"=\" value\n  export class DataURL {\n    private _mediaType:MediaType;\n    private _isBase64:boolean;\n    private _data:string;\n\n    get mediaType():MediaType {\n      return this._mediaType;\n    }\n\n    set mediaType(mediaType:MediaType) {\n      if(mediaType instanceof MediaType) {\n        this._mediaType = mediaType;\n      }\n      else if (typeof mediaType === \"string\") {\n        this._mediaType = new MediaType(<string><any>mediaType);\n      }\n      else {\n        throw new Error(\"Media type must be 'string' or 'MediaType'\");\n      }\n    }\n\n    get isBase64():boolean {\n      return this._isBase64;\n    }\n\n    get data():string {\n      return this._data;\n    }\n\n    setBase64EncodedData(base64EncodedData:string):void {\n      this._isBase64 = true;\n      this._data = base64EncodedData;\n    }\n\n    setURLEncodedData(urlEncodedData:string):void {\n      this._isBase64 = false;\n      this._data = urlEncodedData;\n    }\n\n    constructor(data:any, options?:any) {\n      // Set default options\n      if (!options) {\n        options = {\n          mediaType: null,\n          encoding: \"auto\"\n        };\n      }\n\n      if(!options.encoding) {\n        options.encoding = \"auto\";\n      }\n\n      // Validate encoding\n      if (options.encoding !== \"auto\" && options.encoding !== \"url\" && options.encoding !== \"base64\") {\n        throw new Error(\"Unknown encoding (must be 'auto', 'url', or 'base64'): \" + options.encoding);\n      }\n\n      // Save media type\n      var mediaType:any = options.mediaType;\n      if (typeof mediaType === \"string\") {\n        mediaType = new MediaType(mediaType);\n      }\n      this._mediaType = mediaType;\n\n      // Save data and return if none\n      if (!data) {\n        this._isBase64 = false;\n        this._data = data;\n        return;\n      }\n\n      // Parse data\n      if (data instanceof ArrayBuffer) {\n        if (options.encoding === \"base64\" || options.encoding === \"auto\") {\n          this.setBase64EncodedData(ArrayBufferConverter.toBase64(data));\n        } else if (options.encoding === \"url\") {\n          this.setURLEncodedData(encodeURIComponent(ArrayBufferConverter.toBinaryString(data)));\n        }\n      } else if (typeof data === \"string\") {\n        // Ensure this is a data URI\n        var startsWithData = data.slice(0, \"data:\".length) === \"data:\";\n        if (!startsWithData) {\n          throw new Error(\"Only 'data' URI strings are supported\");\n        }\n\n        // Find the comma that separates the prefix from the data\n        var commaIndex = data.indexOf(\",\");\n        if (commaIndex === -1) {\n          throw new Error(\"Missing comma in SQLBlob URL\");\n        }\n\n        // Get prefix and data\n        var prefix = data.slice(0, commaIndex);\n        var encodedData = data.slice(commaIndex + 1);\n\n        // Get is base64\n        var prefixParts = prefix.split(';');\n        var isBase64 = false;\n        for (var i = 1; i < prefixParts.length; ++i) {\n          var prefixPart = prefixParts[i].trim();\n          if (prefixPart === \"base64\") {\n            isBase64 = true;\n            break;\n          }\n        }\n\n        // Get media type\n        mediaType = prefix.slice(\"data:\".length, commaIndex);\n        mediaType = mediaType.length === 0 ? null : mediaType;\n        this._mediaType = this._mediaType || new MediaType(mediaType);\n\n        // Convert encoded data as needed\n        if (options.encoding === \"auto\") {\n          // Auto encoding saves the data URI as is\n          this._isBase64 = isBase64;\n          this._data = encodedData;\n        } else if (options.encoding === \"base64\") {\n          // Convert to base64\n          this._isBase64 = true;\n          if (isBase64) {\n            this._data = encodedData;\n          } else {\n            this._data = window.btoa(unescape(encodedData));\n          }\n        } else if (options.encoding === \"url\") {\n          // Convert to URL encoding\n          this._isBase64 = false;\n          if (!isBase64) {\n            this._data = encodedData;\n          } else {\n            this._data = encodeURIComponent(window.atob(encodedData));\n          }\n        }\n      } else {\n        throw new Error(\"unsupported object type (must be ArrayBuffer or string): \" + typeof data);\n      }\n    }\n\n    toString():string {\n      return \"data:\" +\n        (this._mediaType ? this._mediaType.toString() : \"\") +\n        (this._isBase64 ? \";base64\" : \"\") + \",\" +\n        (this._data ? this._data : \"\");\n    }\n\n    toJSON():string {\n      return this.toString();\n    }\n\n    valueOf():string {\n      return this.toString();\n    }\n\n    toArrayBuffer():ArrayBuffer {\n      if (!this._data) {\n        return null;\n      }\n      if (this._isBase64) {\n        return ArrayBufferConverter.fromBase64(this._data);\n      } else {\n        return ArrayBufferConverter.fromBinaryString(unescape(this._data));\n      }\n    }\n\n    toBase64():string {\n      if (!this._data) {\n        return this._data;\n      }\n      if (this._isBase64) {\n        return this._data;\n      } else {\n        return window.btoa(unescape(this._data));\n      }\n    }\n\n    toBinaryString():string {\n      if (!this._data) {\n        return this._data;\n      }\n      if (this._isBase64) {\n        return window.atob(this._data);\n      } else {\n        return unescape(this._data);\n      }\n    }\n\n    toUnicodeString():string {\n      if (!this._data) {\n        return this._data;\n      }\n      if (this._isBase64) {\n        return decodeURIComponent(escape(window.atob(this._data)));\n      } else {\n        return decodeURIComponent(this._data);\n      }\n    }\n\n    static createFromBase64(base64:string, options?:any):DataURL {\n      return new DataURL(\"data:;base64,\" + base64, options);\n    }\n\n    static createFromBinaryString(binary:string, options?:any):DataURL {\n      if (!options) {\n        options = {\n          encoding: \"auto\"\n        };\n      }\n      if (options.encoding === \"base64\" || options.encoding === \"auto\") {\n        return new DataURL(\"data:;base64,\" + window.btoa(binary), options);\n      } else if (options.encoding === \"url\") {\n        return new DataURL(\"data:,\" + encodeURIComponent(binary), options);\n      }\n    }\n\n    static createFromUnicodeString(text:string, options?:any):DataURL {\n      return new DataURL(\"data:,\" + encodeURIComponent(text), options);\n    }\n  }\n}\n","var SpicyPixel;\n(function (SpicyPixel) {\n    var Core;\n    (function (Core) {\n        var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n        var ArrayBufferConverter = (function () {\n            function ArrayBufferConverter() {\n                throw new Error('This class is static and not meant to be constructed');\n            }\n            /*\n             * Base64 conversion from:\n             *\n             * base64-arraybuffer\n             * https://github.com/niklasvh/base64-arraybuffer\n             *\n             * Copyright (c) 2012 Niklas von Hertzen\n             * Licensed under the MIT license.\n             */\n            ArrayBufferConverter.toBase64 = function (arrayBuffer) {\n                // jshint bitwise:false\n                var bytes = new Uint8Array(arrayBuffer);\n                var len = bytes.length;\n                var base64 = \"\";\n                for (var i = 0; i < len; i += 3) {\n                    base64 += chars[bytes[i] >> 2];\n                    base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n                    base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n                    base64 += chars[bytes[i + 2] & 63];\n                }\n                if ((len % 3) === 2) {\n                    base64 = base64.substring(0, base64.length - 1) + \"=\";\n                }\n                else if (len % 3 === 1) {\n                    base64 = base64.substring(0, base64.length - 2) + \"==\";\n                }\n                return base64;\n                // jshint bitwise:true\n            };\n            ArrayBufferConverter.fromBase64 = function (base64) {\n                // jshint bitwise:false\n                var bufferLength = base64.length * 0.75;\n                var len = base64.length;\n                var p = 0;\n                var encoded1, encoded2, encoded3, encoded4;\n                if (base64[base64.length - 1] === \"=\") {\n                    bufferLength--;\n                    if (base64[base64.length - 2] === \"=\") {\n                        bufferLength--;\n                    }\n                }\n                var arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n                for (var i = 0; i < len; i += 4) {\n                    encoded1 = chars.indexOf(base64[i]);\n                    encoded2 = chars.indexOf(base64[i + 1]);\n                    encoded3 = chars.indexOf(base64[i + 2]);\n                    encoded4 = chars.indexOf(base64[i + 3]);\n                    bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n                    bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n                    bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n                }\n                return arraybuffer;\n                // jshint bitwise:true\n            };\n            ArrayBufferConverter.toBinaryString = function (arrayBuffer) {\n                var binary = \"\";\n                var bytes = new Uint8Array(arrayBuffer);\n                var length = bytes.byteLength;\n                var i = 0;\n                while (i < length) {\n                    binary += String.fromCharCode(bytes[i]);\n                    ++i;\n                }\n                return binary;\n            };\n            ArrayBufferConverter.fromBinaryString = function (binary) {\n                var length = binary.length;\n                var buffer = new ArrayBuffer(length);\n                var bytes = new Uint8Array(buffer);\n                var i = 0;\n                while (i < length) {\n                    var code = binary.charCodeAt(i);\n                    if (code > 255) {\n                        throw new Error(\"a multibyte character was encountered in the provided string which indicates it was not encoded as a binary string\");\n                    }\n                    bytes[i] = code;\n                    ++i;\n                }\n                return bytes.buffer;\n            };\n            return ArrayBufferConverter;\n        }());\n        Core.ArrayBufferConverter = ArrayBufferConverter;\n    })(Core = SpicyPixel.Core || (SpicyPixel.Core = {}));\n})(SpicyPixel || (SpicyPixel = {}));\n\n// TODO: Optimize using deferred parsing.\n// If a data URL string is passed in and the only operation called is\n// toString() then there is no need to parse and increase\n// memory consumption. This would complicate the code though\n// so only implement if needed.\nvar SpicyPixel;\n(function (SpicyPixel) {\n    var Core;\n    (function (Core) {\n        // data:[<MIME-type>][;charset=<encoding>][;base64],<data>\n        // dataurl    := \"data:\" [ mediatype ] [ \";base64\" ] \",\" data\n        // mediatype  := [ type \"/\" subtype ] *( \";\" parameter )\n        // data       := *urlchar\n        // parameter  := attribute \"=\" value\n        var DataURL = (function () {\n            function DataURL(data, options) {\n                // Set default options\n                if (!options) {\n                    options = {\n                        mediaType: null,\n                        encoding: \"auto\"\n                    };\n                }\n                if (!options.encoding) {\n                    options.encoding = \"auto\";\n                }\n                // Validate encoding\n                if (options.encoding !== \"auto\" && options.encoding !== \"url\" && options.encoding !== \"base64\") {\n                    throw new Error(\"Unknown encoding (must be 'auto', 'url', or 'base64'): \" + options.encoding);\n                }\n                // Save media type\n                var mediaType = options.mediaType;\n                if (typeof mediaType === \"string\") {\n                    mediaType = new Core.MediaType(mediaType);\n                }\n                this._mediaType = mediaType;\n                // Save data and return if none\n                if (!data) {\n                    this._isBase64 = false;\n                    this._data = data;\n                    return;\n                }\n                // Parse data\n                if (data instanceof ArrayBuffer) {\n                    if (options.encoding === \"base64\" || options.encoding === \"auto\") {\n                        this.setBase64EncodedData(Core.ArrayBufferConverter.toBase64(data));\n                    }\n                    else if (options.encoding === \"url\") {\n                        this.setURLEncodedData(encodeURIComponent(Core.ArrayBufferConverter.toBinaryString(data)));\n                    }\n                }\n                else if (typeof data === \"string\") {\n                    // Ensure this is a data URI\n                    var startsWithData = data.slice(0, \"data:\".length) === \"data:\";\n                    if (!startsWithData) {\n                        throw new Error(\"Only 'data' URI strings are supported\");\n                    }\n                    // Find the comma that separates the prefix from the data\n                    var commaIndex = data.indexOf(\",\");\n                    if (commaIndex === -1) {\n                        throw new Error(\"Missing comma in SQLBlob URL\");\n                    }\n                    // Get prefix and data\n                    var prefix = data.slice(0, commaIndex);\n                    var encodedData = data.slice(commaIndex + 1);\n                    // Get is base64\n                    var prefixParts = prefix.split(';');\n                    var isBase64 = false;\n                    for (var i = 1; i < prefixParts.length; ++i) {\n                        var prefixPart = prefixParts[i].trim();\n                        if (prefixPart === \"base64\") {\n                            isBase64 = true;\n                            break;\n                        }\n                    }\n                    // Get media type\n                    mediaType = prefix.slice(\"data:\".length, commaIndex);\n                    mediaType = mediaType.length === 0 ? null : mediaType;\n                    this._mediaType = this._mediaType || new Core.MediaType(mediaType);\n                    // Convert encoded data as needed\n                    if (options.encoding === \"auto\") {\n                        // Auto encoding saves the data URI as is\n                        this._isBase64 = isBase64;\n                        this._data = encodedData;\n                    }\n                    else if (options.encoding === \"base64\") {\n                        // Convert to base64\n                        this._isBase64 = true;\n                        if (isBase64) {\n                            this._data = encodedData;\n                        }\n                        else {\n                            this._data = window.btoa(unescape(encodedData));\n                        }\n                    }\n                    else if (options.encoding === \"url\") {\n                        // Convert to URL encoding\n                        this._isBase64 = false;\n                        if (!isBase64) {\n                            this._data = encodedData;\n                        }\n                        else {\n                            this._data = encodeURIComponent(window.atob(encodedData));\n                        }\n                    }\n                }\n                else {\n                    throw new Error(\"unsupported object type (must be ArrayBuffer or string): \" + typeof data);\n                }\n            }\n            Object.defineProperty(DataURL.prototype, \"mediaType\", {\n                get: function () {\n                    return this._mediaType;\n                },\n                set: function (mediaType) {\n                    if (mediaType instanceof Core.MediaType) {\n                        this._mediaType = mediaType;\n                    }\n                    else if (typeof mediaType === \"string\") {\n                        this._mediaType = new Core.MediaType(mediaType);\n                    }\n                    else {\n                        throw new Error(\"Media type must be 'string' or 'MediaType'\");\n                    }\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(DataURL.prototype, \"isBase64\", {\n                get: function () {\n                    return this._isBase64;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(DataURL.prototype, \"data\", {\n                get: function () {\n                    return this._data;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            DataURL.prototype.setBase64EncodedData = function (base64EncodedData) {\n                this._isBase64 = true;\n                this._data = base64EncodedData;\n            };\n            DataURL.prototype.setURLEncodedData = function (urlEncodedData) {\n                this._isBase64 = false;\n                this._data = urlEncodedData;\n            };\n            DataURL.prototype.toString = function () {\n                return \"data:\" +\n                    (this._mediaType ? this._mediaType.toString() : \"\") +\n                    (this._isBase64 ? \";base64\" : \"\") + \",\" +\n                    (this._data ? this._data : \"\");\n            };\n            DataURL.prototype.toJSON = function () {\n                return this.toString();\n            };\n            DataURL.prototype.valueOf = function () {\n                return this.toString();\n            };\n            DataURL.prototype.toArrayBuffer = function () {\n                if (!this._data) {\n                    return null;\n                }\n                if (this._isBase64) {\n                    return Core.ArrayBufferConverter.fromBase64(this._data);\n                }\n                else {\n                    return Core.ArrayBufferConverter.fromBinaryString(unescape(this._data));\n                }\n            };\n            DataURL.prototype.toBase64 = function () {\n                if (!this._data) {\n                    return this._data;\n                }\n                if (this._isBase64) {\n                    return this._data;\n                }\n                else {\n                    return window.btoa(unescape(this._data));\n                }\n            };\n            DataURL.prototype.toBinaryString = function () {\n                if (!this._data) {\n                    return this._data;\n                }\n                if (this._isBase64) {\n                    return window.atob(this._data);\n                }\n                else {\n                    return unescape(this._data);\n                }\n            };\n            DataURL.prototype.toUnicodeString = function () {\n                if (!this._data) {\n                    return this._data;\n                }\n                if (this._isBase64) {\n                    return decodeURIComponent(escape(window.atob(this._data)));\n                }\n                else {\n                    return decodeURIComponent(this._data);\n                }\n            };\n            DataURL.createFromBase64 = function (base64, options) {\n                return new DataURL(\"data:;base64,\" + base64, options);\n            };\n            DataURL.createFromBinaryString = function (binary, options) {\n                if (!options) {\n                    options = {\n                        encoding: \"auto\"\n                    };\n                }\n                if (options.encoding === \"base64\" || options.encoding === \"auto\") {\n                    return new DataURL(\"data:;base64,\" + window.btoa(binary), options);\n                }\n                else if (options.encoding === \"url\") {\n                    return new DataURL(\"data:,\" + encodeURIComponent(binary), options);\n                }\n            };\n            DataURL.createFromUnicodeString = function (text, options) {\n                return new DataURL(\"data:,\" + encodeURIComponent(text), options);\n            };\n            return DataURL;\n        }());\n        Core.DataURL = DataURL;\n    })(Core = SpicyPixel.Core || (SpicyPixel.Core = {}));\n})(SpicyPixel || (SpicyPixel = {}));\n\n/**\n * media-type\n * @author Lovell Fuller (original JS)\n * @author Aaron Oneal (TypeScript)\n *\n * This code is distributed under the Apache License Version 2.0, the terms of\n * which may be found at http://www.apache.org/licenses/LICENSE-2.0.html\n */\nvar SpicyPixel;\n(function (SpicyPixel) {\n    var Core;\n    (function (Core) {\n        var mediaTypeMatcher = /^(application|audio|image|message|model|multipart|text|video)\\/([a-zA-Z0-9!#$%^&\\*_\\-\\+{}\\|'.`~]{1,127})(;.*)?$/;\n        var parameterSplitter = /;(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*(?![^\\\"]*\\\"))/;\n        var MediaType = (function () {\n            function MediaType(mediaType) {\n                var _this = this;\n                this._type = null;\n                this.setSubtypeAndSuffix(null);\n                this._parameters = {};\n                if (mediaType) {\n                    var match = mediaType.match(mediaTypeMatcher);\n                    if (match) {\n                        this._type = match[1];\n                        this.setSubtypeAndSuffix(match[2]);\n                        if (match[3]) {\n                            match[3].substr(1).split(parameterSplitter).forEach(function (parameter) {\n                                var keyAndValue = parameter.split('=', 2);\n                                if (keyAndValue.length === 2) {\n                                    _this._parameters[keyAndValue[0].toLowerCase().trim()] = _this.unwrapQuotes(keyAndValue[1].trim());\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n            Object.defineProperty(MediaType.prototype, \"type\", {\n                get: function () {\n                    return this._type;\n                },\n                set: function (type) {\n                    this._type = type;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(MediaType.prototype, \"subtype\", {\n                get: function () {\n                    return this._subtype;\n                },\n                set: function (subtype) {\n                    this.setSubtypeAndSuffix(subtype);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(MediaType.prototype, \"parameters\", {\n                get: function () {\n                    return this._parameters;\n                },\n                set: function (parameters) {\n                    this._parameters = parameters;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(MediaType.prototype, \"isValid\", {\n                get: function () {\n                    return this._type !== null && this._subtype !== null && this._subtype !== \"example\";\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(MediaType.prototype, \"hasSuffix\", {\n                get: function () {\n                    return !!this._suffix;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(MediaType.prototype, \"isVendor\", {\n                get: function () {\n                    return this.firstSubtypeFacetEquals(\"vnd\");\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(MediaType.prototype, \"isPersonal\", {\n                get: function () {\n                    return this.firstSubtypeFacetEquals(\"prs\");\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(MediaType.prototype, \"isExperimental\", {\n                get: function () {\n                    return this.firstSubtypeFacetEquals(\"x\") || this._subtype.substring(0, 2).toLowerCase() === \"x-\";\n                },\n                enumerable: true,\n                configurable: true\n            });\n            MediaType.prototype.toString = function () {\n                var _this = this;\n                var str = \"\";\n                if (this.isValid) {\n                    str = str + this._type + \"/\" + this._subtype;\n                    if (this.hasSuffix) {\n                        str = str + \"+\" + this._suffix;\n                    }\n                    var parameterKeys = Object.keys(this._parameters);\n                    if (parameterKeys.length > 0) {\n                        var parameters = [];\n                        var that = this;\n                        parameterKeys.sort(function (a, b) {\n                            return a.localeCompare(b);\n                        }).forEach(function (element) {\n                            parameters.push(element + \"=\" + _this.wrapQuotes(that._parameters[element]));\n                        });\n                        str = str + \";\" + parameters.join(\";\");\n                    }\n                }\n                return str;\n            };\n            MediaType.prototype.toJSON = function () {\n                return this.toString();\n            };\n            MediaType.prototype.valueOf = function () {\n                return this.toString();\n            };\n            MediaType.prototype.setSubtypeAndSuffix = function (subtype) {\n                this._subtype = subtype;\n                this._subtypeFacets = [];\n                this._suffix = null;\n                if (subtype) {\n                    if (subtype.indexOf(\"+\") > -1 && subtype.substr(-1) !== \"+\") {\n                        var fixes = subtype.split(\"+\", 2);\n                        this._subtype = fixes[0];\n                        this._subtypeFacets = fixes[0].split(\".\");\n                        this._suffix = fixes[1];\n                    }\n                    else {\n                        this._subtypeFacets = subtype.split(\".\");\n                    }\n                }\n            };\n            MediaType.prototype.firstSubtypeFacetEquals = function (str) {\n                return this._subtypeFacets.length > 0 && this._subtypeFacets[0] === str;\n            };\n            MediaType.prototype.wrapQuotes = function (str) {\n                return (str.indexOf(\";\") > -1) ? '\"' + str + '\"' : str;\n            };\n            MediaType.prototype.unwrapQuotes = function (str) {\n                return (str.substr(0, 1) === '\"' && str.substr(-1) === '\"') ? str.substr(1, str.length - 2) : str;\n            };\n            return MediaType;\n        }());\n        Core.MediaType = MediaType;\n    })(Core = SpicyPixel.Core || (SpicyPixel.Core = {}));\n})(SpicyPixel || (SpicyPixel = {}));\n\nvar SpicyPixel;\n(function (SpicyPixel) {\n    var Core;\n    (function (Core) {\n        var Imports = (function () {\n            function Imports() {\n            }\n            return Imports;\n        }());\n        Core.Imports = Imports;\n    })(Core = SpicyPixel.Core || (SpicyPixel.Core = {}));\n})(SpicyPixel || (SpicyPixel = {}));\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD anonymous module\n        define([], factory);\n    }\n    else if (typeof exports === 'object') {\n        // CommonJS anonymous module\n        module.exports = factory();\n    }\n    else {\n        // Browser globals\n        root.SpicyPixel = root.SpicyPixel || {};\n        root.SpicyPixel.Core = factory();\n    }\n})(this, function () {\n    return SpicyPixel.Core;\n});\n\n","/**\n * media-type\n * @author Lovell Fuller (original JS)\n * @author Aaron Oneal (TypeScript)\n *\n * This code is distributed under the Apache License Version 2.0, the terms of\n * which may be found at http://www.apache.org/licenses/LICENSE-2.0.html\n */\n\nmodule SpicyPixel.Core {\n  var mediaTypeMatcher = /^(application|audio|image|message|model|multipart|text|video)\\/([a-zA-Z0-9!#$%^&\\*_\\-\\+{}\\|'.`~]{1,127})(;.*)?$/;\n  var parameterSplitter = /;(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*(?![^\\\"]*\\\"))/;\n\n  export class MediaType {\n    private _type:string;\n    private _subtype:string;\n    private _parameters:any;\n    private _suffix:string;\n    private _subtypeFacets:string[];\n\n    constructor(mediaType?:string) {\n      this._type = null;\n      this.setSubtypeAndSuffix(null);\n      this._parameters = {};\n\n      if (mediaType) {\n        var match = mediaType.match(mediaTypeMatcher);\n        if (match) {\n          this._type = match[1];\n          this.setSubtypeAndSuffix(match[2]);\n          if (match[3]) {\n            match[3].substr(1).split(parameterSplitter).forEach((parameter) => {\n              var keyAndValue = parameter.split('=', 2);\n              if (keyAndValue.length === 2) {\n                this._parameters[keyAndValue[0].toLowerCase().trim()] = this.unwrapQuotes(keyAndValue[1].trim());\n              }\n            });\n          }\n        }\n      }\n    }\n\n    get type():string {\n      return this._type;\n    }\n\n    set type(type:string) {\n      this._type = type;\n    }\n\n    get subtype():string {\n      return this._subtype;\n    }\n\n    set subtype(subtype:string) {\n      this.setSubtypeAndSuffix(subtype);\n    }\n\n    get parameters():any {\n      return this._parameters;\n    }\n\n    set parameters(parameters:any) {\n      this._parameters = parameters;\n    }\n\n    get isValid():boolean {\n      return this._type !== null && this._subtype !== null && this._subtype !== \"example\";\n    }\n\n    get hasSuffix():boolean {\n      return !!this._suffix;\n    }\n\n    get isVendor():boolean {\n      return this.firstSubtypeFacetEquals(\"vnd\");\n    }\n\n    get isPersonal():boolean {\n      return this.firstSubtypeFacetEquals(\"prs\");\n    }\n\n    get isExperimental():boolean {\n      return this.firstSubtypeFacetEquals(\"x\") || this._subtype.substring(0, 2).toLowerCase() === \"x-\";\n    }\n\n    toString():string {\n      var str = \"\";\n      if (this.isValid) {\n        str = str + this._type + \"/\" + this._subtype;\n        if (this.hasSuffix) {\n          str = str + \"+\" + this._suffix;\n        }\n        var parameterKeys = Object.keys(this._parameters);\n        if (parameterKeys.length > 0) {\n          var parameters:string[] = [];\n          var that = this;\n          parameterKeys.sort((a, b) => {\n            return a.localeCompare(b);\n          }).forEach((element) => {\n            parameters.push(element + \"=\" + this.wrapQuotes(that._parameters[element]));\n          });\n          str = str + \";\" + parameters.join(\";\");\n        }\n      }\n      return str;\n    }\n\n    toJSON():string {\n      return this.toString();\n    }\n\n    valueOf():string {\n      return this.toString();\n    }\n\n    private setSubtypeAndSuffix(subtype:string):void {\n      this._subtype = subtype;\n      this._subtypeFacets = [];\n      this._suffix = null;\n      if (subtype) {\n        if (subtype.indexOf(\"+\") > -1 && subtype.substr(-1) !== \"+\") {\n          var fixes = subtype.split(\"+\", 2);\n          this._subtype = fixes[0];\n          this._subtypeFacets = fixes[0].split(\".\");\n          this._suffix = fixes[1];\n        } else {\n          this._subtypeFacets = subtype.split(\".\");\n        }\n      }\n    }\n\n    private firstSubtypeFacetEquals(str:string):boolean {\n      return this._subtypeFacets.length > 0 && this._subtypeFacets[0] === str;\n    }\n\n    private wrapQuotes(str:string):string {\n      return (str.indexOf(\";\") > -1) ? '\"' + str + '\"' : str;\n    }\n\n    private unwrapQuotes(str:string):string {\n      return (str.substr(0, 1) === '\"' && str.substr(-1) === '\"') ? str.substr(1, str.length - 2) : str;\n    }\n  }\n}\n","module SpicyPixel.Core {\n  export class Imports {\n  }\n}\n\ndeclare var module:any;\ndeclare var exports:any;\ndeclare var define:any;\ndeclare var require:any;\n\n(function (root:any, factory:any) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD anonymous module\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    // CommonJS anonymous module\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.SpicyPixel = root.SpicyPixel || {};\n    root.SpicyPixel.Core = factory();\n  }\n})(this, function () {\n  return SpicyPixel.Core;\n});"],"sourceRoot":"./"}